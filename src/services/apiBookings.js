import { PAGE_SIZE } from "../utils/constants";
import { getToday } from "../utils/helpers";
import supabase from "./supabase";

export async function getBookings({ filter, sortBy, page }) {
  let query = supabase
    .from("bookings")
    .select(
      "id,created_at,start_date,end_date,num_nights,num_guests,status,total_price,guests(full_name,email_ID),cabins(name)",
      { count: "exact" }
    );

  // FILTER
  // if (filter != null) query = query.eq(filter.field, filter.value);
  if (filter) query = query[filter.method || "eq"](filter.field, filter.value);
  // if want to add more than one filters then we can pass an array of filter then loop on it and add each one to the query

  // SORT
  if (sortBy)
    query = query.order(sortBy.field, {
      ascending: sortBy.direction === "asc",
    });

  // PAGINATION
  if (page) {
    const from = (page - 1) * PAGE_SIZE;
    const to = from + PAGE_SIZE - 1;
    query = query.range(from, to);
  }

  const { data, error, count } = await query;

  if (error) {
    console.error(error);
    throw new Error("Bookings could not get loaded");
  }

  return { data, count };
}

export async function getBooking(id) {
  const { data, error } = await supabase
    .from("bookings")
    .select("*, cabins(*), guests(*)")
    .eq("id", id)
    .single();

  if (error) {
    console.error(error);
    throw new Error("Booking not found");
  }

  return data;
}

// Returns all BOOKINGS that are were created after the given date. Useful to get bookings created in the last 30 days, for example.
export async function getBookingsAfterDate(date) {
  const { data, error } = await supabase
    .from("bookings")
    .select("created_at, total_price, extras_price")
    .gte("created_at", date)
    .lte("created_at", getToday({ end: true }));

  if (error) {
    console.error(error);
    throw new Error("Bookings could not get loaded");
  }

  return data;
}

// Returns all STAYS that are were created after the given date
export async function getStaysAfterDate(date) {
  const { data, error } = await supabase
    .from("bookings")
    // .select('*')
    .select("*, guests(full_name)")
    .gte("start_date", date)
    .lte("start_date", getToday());

  if (error) {
    console.error(error);
    throw new Error("Bookings could not get loaded");
  }

  return data;
}

// Activity means that there is a check in or a check out today
export async function getStaysTodayActivity() {
  const { data, error } = await supabase
    .from("bookings")
    .select("*, guests(full_name,country_flag)")
    .or(
      `and(status.eq.unconfirmed,start_date.eq.${getToday()}),and(status.eq.checked-in,end_date.eq.${getToday()})`
    )
    .order("created_at");

  // Equivalent to this. But by querying this, we only download the data we actually need, otherwise we would need ALL bookings ever created
  // (stay.status === 'unconfirmed' && isToday(new Date(stay.startDate))) ||
  // (stay.status === 'checked-in' && isToday(new Date(stay.endDate)))

  if (error) {
    console.error(error);
    throw new Error("Bookings could not get loaded");
  }
  return data;
}

export async function updateBooking(id, obj) {
  const { data, error } = await supabase
    .from("bookings")
    .update(obj)
    .eq("id", id)
    .select()
    .single();

  if (error) {
    console.error(error);
    throw new Error("Booking could not be updated");
  }
  return data;
}

export async function deleteBooking(id) {
  // REMEMBER RLS POLICIES
  const { data, error } = await supabase.from("bookings").delete().eq("id", id);

  if (error) {
    console.error(error);
    throw new Error("Booking could not be deleted");
  }
  return data;
}

// const bookingStructure = {
//   id : 1,
//   created_at : "",
//   start_date:"",
//   end_date :"",
//   num_nights :"",
//   num_guests :"",
//   cabin_price:"",
//   extras_price:"",
//   total_price:"",
//   status:"",
//   has_breakfast:"",
//   is_paid :"",
//   observations:"",
//   cabin_id :"",
//   guest_id :"",
// }

// create table
//   public.bookings (
//     id bigint generated by default as identity,
//     created_at timestamp with time zone not null default now(),
//     start_date timestamp without time zone null,
//     end_date timestamp without time zone null,
//     num_nights smallint null,
//     num_guests smallint null,
//     cabin_price real null,
//     extras_price real null,
//     total_price real null,
//     status text null,
//     has_breakfast boolean null,
//     is_paid boolean null,
//     observations text null,
//     cabin_id bigint null,
//     guest_id bigint null,
//     constraint bookings_pkey primary key (id),
//     constraint public_bookings_cabin_id_fkey foreign key (cabin_id) references cabins (id),
//     constraint public_bookings_guest - id_fkey foreign key (guest_id) references guests (id)
//   ) tablespace pg_default;

// create table
//   public.guests (
//     id bigint generated by default as identity,
//     created_at timestamp with time zone not null default now(),
//     full_name text null,
//     "email_ID" text null,
//     "national_ID" text null,
//     nationality text null,
//     country_flag text null,
//     constraint guests_pkey primary key (id)
//   ) tablespace pg_default;
